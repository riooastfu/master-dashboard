"use client"

import L from "leaflet";
import React, { FC, useEffect, useRef, useState } from 'react'

import mapgeo from "@/public/geojson/map.json"
import { MarkerIcon } from "@/components/leaflet/marker-icon";
import { MapContainer, Marker, Polygon, Popup, TileLayer, GeoJSON } from 'react-leaflet'
import axios from "axios";
import { useMapStore } from "@/lib/map-store";
import { getPersentase } from "@/actions/produksi";
import ModalButton from "../modals/modal-button";

const MapComponent: FC = () => {
    const geoJsonLayerRef = useRef<any>(null);
    const { visibility, setUpdateStyles } = useMapStore()
    const setColor = ({ properties }: any) => {
        return { weight: 1 };
    };

    const filterFeatures = (feature: any) => {
        const estate = feature.properties.ESTATE_1;
        if (estate === "0601") return visibility.MB1; // MB1
        if (estate === "0602") return visibility.MB2; // MB2
        if (estate === "0603") return visibility.MB3; // MB3
        return false;
    };

    // Function called on button click to change styles dynamically
    const updateStyles = () => {
        if (geoJsonLayerRef.current) {
            geoJsonLayerRef.current.eachLayer(async (layer: any) => {
                let fillColor = '';
                const feature = layer.feature;
                const percentage = await getPersentase(feature.properties.COSTCENTER);
                if (percentage <= 80) fillColor = '#f55142';
                else if (percentage > 80 && percentage <= 90) fillColor = '#f752b0';
                else if (percentage > 90 && percentage <= 100) fillColor = '#f5d742';
                else if (percentage > 100 && percentage <= 110) fillColor = '#42adf5';
                else if (percentage > 110) fillColor = '#9cf542';

                layer.setStyle({
                    color: 'black',
                    weight: 1,
                    opacity: 1,
                    fillOpacity: 0.5,
                    fillColor,
                });
            });
        }
    };

    useEffect(() => {
        setUpdateStyles(updateStyles);
    }, [setUpdateStyles]);

    return (
        <MapContainer className='h-full z-0' center={[-6.227386, 106.807194]} zoom={15} scrollWheelZoom={false}>
            <TileLayer
                attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                url="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"
            />


            <MarkerIcon position={[-6.227386, 106.807194]} />
            <GeoJSON
                key={JSON.stringify(visibility)}
                data={mapgeo as any}
                filter={filterFeatures}
                style={setColor}
                // onEachFeature={onEachFeature}
                ref={geoJsonLayerRef}
            />
            <ModalButton type={"produksi"} className="p-3 top-0 right-0 z-[1000] absolute" />
        </MapContainer>
    )
}

export default MapComponent